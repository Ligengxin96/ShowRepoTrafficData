{"version":3,"sources":["fetchRepoData.js","components/LineChart/style.less","components/LineChart/LineChart.js","components/Menus/Menus.js","App.js","index.js"],"names":["fetchRepoData","repoName","axios","get","getOption","repoData","title","text","date","length","tooltip","trigger","legend","data","itemGap","grid","top","left","right","containLabel","xAxis","type","boundaryGap","yAxis","dataZoom","show","start","end","series","name","views","clones","LineChart","useState","loading","setLoading","setRepoData","useEffect","then","response","viewsData","clonesData","result","minDate","maxDate","moment","isBefore","push","format","value","find","item","isSame","uniques","add","processData","catch","err","console","log","finally","echarts","GridComponent","TooltipComponent","TitleComponent","DataZoomComponent","EchartSLineChart","CanvasRenderer","className","styles","repoTrafficCard","bordered","style","height","option","notMerge","lazyUpdate","Menus","repos","currentMenus","setCurrentMenus","onClick","e","key","selectedKeys","theme","mode","map","repo","Item","REPOS","App","GridContent","fallback","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d777705f.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nconst API_PATH = 'https://www.ligengxin-server.top/getrepoinfo/v1/getrepoinfo';\r\n\r\nconst fetchRepoData = (repoName) => axios.get(`${API_PATH}/${repoName}`);\r\n\r\nexport default fetchRepoData;","export default __webpack_public_path__ + \"static/media/style.30ef0a67.less\";","/* eslint-disable no-loop-func */\r\nimport { useState, useEffect } from 'react';\r\nimport ReactEChartsCore from 'echarts-for-react/lib/core';\r\nimport { Card } from 'antd';\r\nimport { LineChart as EchartSLineChart } from 'echarts/charts';\r\nimport * as echarts from 'echarts/core';\r\nimport { GridComponent, TooltipComponent, TitleComponent, DataZoomComponent } from 'echarts/components';\r\nimport { CanvasRenderer } from 'echarts/renderers';\r\nimport moment from 'moment';\r\n\r\nimport fetchRepoData from '../../fetchRepoData';\r\n\r\nimport styles from './style.less';\r\n\r\nconst processData = ({ viewsData = [], clonesData = [] }) => {\r\n  const result = { views: [], clones: [], date: [] };\r\n\r\n  let minDate = viewsData[viewsData.length - 1].date < clonesData[clonesData.length - 1].date ? viewsData[viewsData.length - 1].date : clonesData[clonesData.length - 1].date;\r\n  let maxDate = viewsData[0].date > clonesData[0].date ? viewsData[0].date : clonesData[0].date;\r\n  minDate = moment(minDate);\r\n  maxDate = moment(maxDate);\r\n\r\n  while (minDate.isBefore(maxDate)) {\r\n    result.views.push({\r\n      date: minDate.format('YYYY-MM-DD'),\r\n      value: viewsData.find((item) => minDate.isSame(item.date))?.uniques || 0,\r\n      type: 'views',\r\n    });\r\n    result.clones.push({\r\n      date: minDate.format('YYYY-MM-DD'),\r\n      value: clonesData.find((item) => minDate.isSame(item.date))?.uniques || 0,\r\n      type: 'clones',\r\n    });\r\n    result.date.push(minDate.format('YYYY-MM-DD'));\r\n    minDate = moment(minDate).add(1, 'days');\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\nconst getOption = (repoData, repoName) => {\r\n  if (!repoData) {\r\n    return {};\r\n  }\r\n  return {\r\n    title: {\r\n      text: `${repoName} ${repoData.date[0]} To ${repoData.date[repoData.date.length - 1]} Traffic Data`\r\n    },\r\n    tooltip: {\r\n      trigger: 'axis'\r\n    },\r\n    legend: {\r\n      data: ['clones', 'views'],\r\n      itemGap: 7\r\n    },\r\n    grid: {\r\n      top: '15%',\r\n      left: '1%',\r\n      right: '5%',\r\n      containLabel: true\r\n    },\r\n    xAxis: [\r\n      {\r\n        type: 'category',\r\n        boundaryGap: false,\r\n        data: repoData.date\r\n      }\r\n    ],\r\n    yAxis: [\r\n      {\r\n        type: 'value',\r\n      }\r\n    ],\r\n    dataZoom: [\r\n      {\r\n        type: 'slider',\r\n        show: true,\r\n        start: 0,\r\n        end: 100,\r\n      },\r\n      {\r\n        type: 'inside',\r\n        start: 0,\r\n        end: 100\r\n      }\r\n\r\n    ],\r\n    series: [\r\n      {\r\n        name: 'view',\r\n        type: 'line',\r\n        data: repoData.views\r\n      },\r\n      {\r\n        name: 'clones',\r\n        type: 'line',\r\n        data: repoData.clones\r\n      }\r\n    ]\r\n  };\r\n}\r\n\r\nconst LineChart = ({ repoName }) => {\r\n\r\n  const [loading, setLoading] = useState(false);\r\n  const [repoData, setRepoData] = useState(null);\r\n\r\n  useEffect(() => {\r\n    setLoading(true);\r\n    fetchRepoData(repoName)\r\n      .then((response) => {\r\n        const { data = [] } = response.data;\r\n        setRepoData(processData(data));\r\n      }).catch((err) => {\r\n        console.log(err);\r\n      }).finally(() => {\r\n        setLoading(false);\r\n      });\r\n  }, [repoName]);\r\n\r\n  echarts.use([GridComponent, TooltipComponent, TitleComponent, DataZoomComponent, EchartSLineChart, CanvasRenderer]);\r\n\r\n  return (\r\n    <Card\r\n      loading={loading}\r\n      className={styles.repoTrafficCard}\r\n      bordered={false}\r\n    >\r\n      <ReactEChartsCore\r\n        style={{ height: '50vh' }}\r\n        echarts={echarts}\r\n        option={getOption(repoData, repoName)}\r\n        notMerge={true}\r\n        lazyUpdate={true}\r\n      />\r\n    </Card>\r\n  );\r\n}\r\n\r\n\r\nexport default LineChart;\r\n","import React from \"react\";\nimport { Menu } from \"antd\";\n\nconst Menus = ({ repos = [], currentMenus, setCurrentMenus}) => {\n  \n  const handleClick = (e) => {\n    setCurrentMenus(e.key);\n  };\n\n  return (\n    <Menu onClick={handleClick} selectedKeys={currentMenus} theme=\"dark\" mode=\"horizontal\">\n      {\n        repos.map((repo) => (\n          <Menu.Item key={repo}>\n            {repo}\n          </Menu.Item>\n        ))\n      }\n    </Menu>\n  );\n}\n\nexport default Menus;","import { useState, Suspense } from 'react';\nimport { Col } from 'antd';\nimport { GridContent } from '@ant-design/pro-layout';\nimport LineChart from './components/LineChart/LineChart';\nimport Menus from './components/Menus/Menus';\n\nconst REPOS = [\n  'FetchBingDailyImage',\n  'Ours-Album',\n  'FetchRepoTrafficData',\n]\n\nconst App = () => {\n  const [currentMenus, setCurrentMenus] = useState(REPOS[0]);\n  return (\n    <>\n      <Col>\n        <Menus repos={REPOS} currentMenus={currentMenus} setCurrentMenus={setCurrentMenus} />\n      </Col>\n      <Col>\n        <GridContent>\n          <>\n            <Suspense fallback={null}>\n              <LineChart repoName={currentMenus} />\n            </Suspense>\n          </>\n        </GridContent>\n      </Col>\n    </>\n  );\n};\n\nexport default App;","import ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nimport './index.css'\r\n\r\n\r\nReactDOM.render(\r\n  <App />,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}