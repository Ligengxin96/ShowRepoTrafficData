{"version":3,"sources":["fetchRepoData.js","components/LineChart/style.less","components/LineChart/LineChart.js","components/Menus/Menus.js","App.js","index.js"],"names":["fetchRepoData","repoName","axios","get","getOption","repoData","title","text","date","length","tooltip","trigger","legend","data","itemGap","grid","top","left","right","containLabel","xAxis","type","boundaryGap","yAxis","dataZoom","show","start","end","series","name","views","clones","LineChart","useState","loading","setLoading","setRepoData","useEffect","then","response","viewsData","clonesData","result","minDate","maxDate","moment","isBefore","push","format","value","find","item","isSame","uniques","add","processData","catch","err","console","log","finally","echarts","GridComponent","TooltipComponent","TitleComponent","DataZoomComponent","EchartSLineChart","CanvasRenderer","className","styles","repoTrafficCard","bordered","style","height","option","notMerge","lazyUpdate","Menus","repos","currentMenus","setCurrentMenus","onClick","e","key","selectedKeys","theme","mode","map","repo","Item","REPOS","App","GridContent","fallback","ReactDOM","render","document","getElementById"],"mappings":"qVAMeA,EAFO,SAACC,GAAD,OAAcC,IAAMC,IAAN,UAFnB,8DAEmB,YAAyBF,KCJ9C,MAA0B,mC,QCwCnCG,EAAY,SAACC,EAAUJ,GAC3B,OAAKI,EAGE,CACLC,MAAO,CACLC,KAAK,GAAD,OAAKN,EAAL,YAAiBI,EAASG,KAAK,GAA/B,eAAwCH,EAASG,KAAKH,EAASG,KAAKC,OAAS,GAA7E,kBAENC,QAAS,CACPC,QAAS,QAEXC,OAAQ,CACNC,KAAM,CAAC,SAAU,SACjBC,QAAS,GAEXC,KAAM,CACJC,IAAK,MACLC,KAAM,KACNC,MAAO,KACPC,cAAc,GAEhBC,MAAO,CACL,CACEC,KAAM,WACNC,aAAa,EACbT,KAAMR,EAASG,OAGnBe,MAAO,CACL,CACEF,KAAM,UAGVG,SAAU,CACR,CACEH,KAAM,SACNI,MAAM,EACNC,MAAO,EACPC,IAAK,KAEP,CACEN,KAAM,SACNK,MAAO,EACPC,IAAK,MAITC,OAAQ,CACN,CACEC,KAAM,OACNR,KAAM,OACNR,KAAMR,EAASyB,OAEjB,CACED,KAAM,SACNR,KAAM,OACNR,KAAMR,EAAS0B,UAtDZ,IAkGIC,EAtCG,SAAC,GAAkB,IAAhB/B,EAAe,EAAfA,SAEnB,EAA8BgC,oBAAS,GAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAAgCF,mBAAS,MAAzC,mBAAO5B,EAAP,KAAiB+B,EAAjB,KAiBA,OAfAC,qBAAU,WACRF,GAAW,GACXnC,EAAcC,GACXqC,MAAK,SAACC,GACL,MAAsBA,EAAS1B,KAAvBA,KACRuB,EAlGY,SAAC,GAAyC,IAAD,IAAtCI,iBAAsC,MAA1B,GAA0B,MAAtBC,kBAAsB,MAAT,GAAS,EACrDC,EAAS,CAAEZ,MAAO,GAAIC,OAAQ,GAAIvB,KAAM,IAE1CmC,EAAUH,EAAUA,EAAU/B,OAAS,GAAGD,KAAOiC,EAAWA,EAAWhC,OAAS,GAAGD,KAAOgC,EAAUA,EAAU/B,OAAS,GAAGD,KAAOiC,EAAWA,EAAWhC,OAAS,GAAGD,KACnKoC,EAAUJ,EAAU,GAAGhC,KAAOiC,EAAW,GAAGjC,KAAOgC,EAAU,GAAGhC,KAAOiC,EAAW,GAAGjC,KAIzF,IAHAmC,EAAUE,IAAOF,GACjBC,EAAUC,IAAOD,GAEVD,EAAQG,SAASF,IAAU,CAAC,IAAD,IAChCF,EAAOZ,MAAMiB,KAAK,CAChBvC,KAAMmC,EAAQK,OAAO,cACrBC,OAAO,UAAAT,EAAUU,MAAK,SAACC,GAAD,OAAUR,EAAQS,OAAOD,EAAK3C,gBAA7C,eAAqD6C,UAAW,EACvEhC,KAAM,UAERqB,EAAOX,OAAOgB,KAAK,CACjBvC,KAAMmC,EAAQK,OAAO,cACrBC,OAAO,UAAAR,EAAWS,MAAK,SAACC,GAAD,OAAUR,EAAQS,OAAOD,EAAK3C,gBAA9C,eAAsD6C,UAAW,EACxEhC,KAAM,WAERqB,EAAOlC,KAAKuC,KAAKJ,EAAQK,OAAO,eAChCL,EAAUE,IAAOF,GAASW,IAAI,EAAG,QAGnC,OAAOZ,EA2EWa,MADZ,MAAe,GAAf,OAECC,OAAM,SAACC,GACRC,QAAQC,IAAIF,MACXG,SAAQ,WACTzB,GAAW,QAEd,CAAClC,IAEJ4D,IAAY,CAACC,IAAeC,IAAkBC,IAAgBC,IAAmBC,IAAkBC,MAGjG,cAAC,IAAD,CACEjC,QAASA,EACTkC,UAAWC,EAAOC,gBAClBC,UAAU,EAHZ,SAKE,cAAC,IAAD,CACEC,MAAO,CAAEC,OAAQ,QACjBZ,QAASA,EACTa,OAAQtE,EAAUC,EAAUJ,GAC5B0E,UAAU,EACVC,YAAY,O,SC/GLC,EAnBD,SAAC,GAAkD,IAAD,IAA/CC,aAA+C,MAAvC,GAAuC,EAAnCC,EAAmC,EAAnCA,aAAcC,EAAqB,EAArBA,gBAMzC,OACE,cAAC,IAAD,CAAMC,QALY,SAACC,GACnBF,EAAgBE,EAAEC,MAIUC,aAAcL,EAAcM,MAAM,OAAOC,KAAK,aAA1E,SAEIR,EAAMS,KAAI,SAACC,GAAD,OACR,cAAC,IAAKC,KAAN,UACGD,GADaA,SCPpBE,EAAQ,CACZ,sBACA,aACA,wBAuBaC,EApBH,WACV,MAAwC1D,mBAASyD,EAAM,IAAvD,mBAAOX,EAAP,KAAqBC,EAArB,KACA,OACE,qCACE,cAAC,IAAD,UACE,cAAC,EAAD,CAAOF,MAAOY,EAAOX,aAAcA,EAAcC,gBAAiBA,MAEpE,cAAC,IAAD,UACE,cAACY,EAAA,EAAD,UACE,mCACE,cAAC,WAAD,CAAUC,SAAU,KAApB,SACE,cAAC,EAAD,CAAW5F,SAAU8E,gB,OCjBnCe,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.762a4e31.chunk.js","sourcesContent":["import axios from 'axios';\n\nconst API_PATH = 'https://www.ligengxin-server.top/getrepoinfo/v1/getrepoinfo';\n\nconst fetchRepoData = (repoName) => axios.get(`${API_PATH}/${repoName}`);\n\nexport default fetchRepoData;","export default __webpack_public_path__ + \"static/media/style.b90bb36d.less\";","/* eslint-disable no-loop-func */\nimport { useState, useEffect } from 'react';\nimport ReactEChartsCore from 'echarts-for-react/lib/core';\nimport { Card } from 'antd';\nimport { LineChart as EchartSLineChart } from 'echarts/charts';\nimport * as echarts from 'echarts/core';\nimport { GridComponent, TooltipComponent, TitleComponent, DataZoomComponent } from 'echarts/components';\nimport { CanvasRenderer } from 'echarts/renderers';\nimport moment from 'moment';\n\nimport fetchRepoData from '../../fetchRepoData';\n\nimport styles from './style.less';\n\nconst processData = ({ viewsData = [], clonesData = [] }) => {\n  const result = { views: [], clones: [], date: [] };\n\n  let minDate = viewsData[viewsData.length - 1].date < clonesData[clonesData.length - 1].date ? viewsData[viewsData.length - 1].date : clonesData[clonesData.length - 1].date;\n  let maxDate = viewsData[0].date > clonesData[0].date ? viewsData[0].date : clonesData[0].date;\n  minDate = moment(minDate);\n  maxDate = moment(maxDate);\n\n  while (minDate.isBefore(maxDate)) {\n    result.views.push({\n      date: minDate.format('YYYY-MM-DD'),\n      value: viewsData.find((item) => minDate.isSame(item.date))?.uniques || 0,\n      type: 'views',\n    });\n    result.clones.push({\n      date: minDate.format('YYYY-MM-DD'),\n      value: clonesData.find((item) => minDate.isSame(item.date))?.uniques || 0,\n      type: 'clones',\n    });\n    result.date.push(minDate.format('YYYY-MM-DD'));\n    minDate = moment(minDate).add(1, 'days');\n  }\n\n  return result;\n}\n\nconst getOption = (repoData, repoName) => {\n  if (!repoData) {\n    return {};\n  }\n  return {\n    title: {\n      text: `${repoName} ${repoData.date[0]} To ${repoData.date[repoData.date.length - 1]} Traffic Data`\n    },\n    tooltip: {\n      trigger: 'axis'\n    },\n    legend: {\n      data: ['clones', 'views'],\n      itemGap: 7\n    },\n    grid: {\n      top: '15%',\n      left: '1%',\n      right: '5%',\n      containLabel: true\n    },\n    xAxis: [\n      {\n        type: 'category',\n        boundaryGap: false,\n        data: repoData.date\n      }\n    ],\n    yAxis: [\n      {\n        type: 'value',\n      }\n    ],\n    dataZoom: [\n      {\n        type: 'slider',\n        show: true,\n        start: 0,\n        end: 100,\n      },\n      {\n        type: 'inside',\n        start: 0,\n        end: 100\n      }\n\n    ],\n    series: [\n      {\n        name: 'view',\n        type: 'line',\n        data: repoData.views\n      },\n      {\n        name: 'clones',\n        type: 'line',\n        data: repoData.clones\n      }\n    ]\n  };\n}\n\nconst LineChart = ({ repoName }) => {\n\n  const [loading, setLoading] = useState(false);\n  const [repoData, setRepoData] = useState(null);\n\n  useEffect(() => {\n    setLoading(true);\n    fetchRepoData(repoName)\n      .then((response) => {\n        const { data = [] } = response.data;\n        setRepoData(processData(data));\n      }).catch((err) => {\n        console.log(err);\n      }).finally(() => {\n        setLoading(false);\n      });\n  }, [repoName]);\n\n  echarts.use([GridComponent, TooltipComponent, TitleComponent, DataZoomComponent, EchartSLineChart, CanvasRenderer]);\n\n  return (\n    <Card\n      loading={loading}\n      className={styles.repoTrafficCard}\n      bordered={false}\n    >\n      <ReactEChartsCore\n        style={{ height: '50vh' }}\n        echarts={echarts}\n        option={getOption(repoData, repoName)}\n        notMerge={true}\n        lazyUpdate={true}\n      />\n    </Card>\n  );\n}\n\n\nexport default LineChart;\n","import React from \"react\";\nimport { Menu } from \"antd\";\n\nconst Menus = ({ repos = [], currentMenus, setCurrentMenus}) => {\n  \n  const handleClick = (e) => {\n    setCurrentMenus(e.key);\n  };\n\n  return (\n    <Menu onClick={handleClick} selectedKeys={currentMenus} theme=\"dark\" mode=\"horizontal\">\n      {\n        repos.map((repo) => (\n          <Menu.Item key={repo}>\n            {repo}\n          </Menu.Item>\n        ))\n      }\n    </Menu>\n  );\n}\n\nexport default Menus;","import { useState, Suspense } from 'react';\nimport { Col } from 'antd';\nimport { GridContent } from '@ant-design/pro-layout';\nimport LineChart from './components/LineChart/LineChart';\nimport Menus from './components/Menus/Menus';\n\nconst REPOS = [\n  'FetchBingDailyImage',\n  'Ours-Album',\n  'FetchRepoTrafficData',\n]\n\nconst App = () => {\n  const [currentMenus, setCurrentMenus] = useState(REPOS[0]);\n  return (\n    <>\n      <Col>\n        <Menus repos={REPOS} currentMenus={currentMenus} setCurrentMenus={setCurrentMenus} />\n      </Col>\n      <Col>\n        <GridContent>\n          <>\n            <Suspense fallback={null}>\n              <LineChart repoName={currentMenus} />\n            </Suspense>\n          </>\n        </GridContent>\n      </Col>\n    </>\n  );\n};\n\nexport default App;","import ReactDOM from 'react-dom';\nimport App from './App';\n\nimport './index.css'\n\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);"],"sourceRoot":""}